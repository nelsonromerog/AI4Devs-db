generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       Int       @id @default(autoincrement())
  name     String

  employees Employee[]
  positions Position[]
}

model ContactInfo {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  phone   String?
  address String?
}

model Employee {
  id         Int         @id @default(autoincrement())
  companyId  Int
  name       String
  contactId  Int
  role       String?
  isActive   Boolean      @default(true)

  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contact    ContactInfo  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  interviews Interview[]
}

model InterviewFlow {
  id      Int            @id @default(autoincrement())
  description String

  steps  InterviewStep[]
  positions Position[]
}

model InterviewType {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int             @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String
  orderIndex      Int

  flow            InterviewFlow   @relation(fields: [interviewFlowId], references: [id], onDelete: Cascade)
  type            InterviewType   @relation(fields: [interviewTypeId], references: [id], onDelete: Cascade)
  interviews      Interview[]
}

model Position {
  id               Int            @id @default(autoincrement())
  companyId        Int
  interviewFlowId  Int?
  title            String
  description      String?
  status           String
  isVisible        Boolean        @default(true)
  location         String?
  salaryMin        Float?
  salaryMax        Float?
  employmentType   String?

  company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow    InterviewFlow? @relation(fields: [interviewFlowId], references: [id], onDelete: SetNull)
  details          PositionDetails?
  applications     Application[]
}

model PositionDetails {
  positionId       Int            @id
  jobDescription   String?
  requirements     String?
  responsibilities String?
  benefits         String?
  companyDescription String?
  applicationDeadline DateTime?
  contactInfo      String?

  position         Position       @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model Candidate {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  contactId Int

  contact   ContactInfo @relation(fields: [contactId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id          Int         @id @default(autoincrement())
  positionId  Int
  candidateId Int
  applicationDate DateTime
  status      String
  notes       String?

  position    Position    @relation(fields: [positionId], references: [id], onDelete: Cascade)
  candidate   Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  interviews  Interview[]
}

model Interview {
  id             Int            @id @default(autoincrement())
  applicationId  Int
  interviewStepId Int
  employeeId     Int?
  interviewDate  DateTime
  result         String?
  score          Int?
  notes          String?

  application    Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  step           InterviewStep  @relation(fields: [interviewStepId], references: [id], onDelete: Cascade)
  employee       Employee?      @relation(fields: [employeeId], references: [id], onDelete: SetNull)
}